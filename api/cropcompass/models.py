from __future__ import unicode_literals
import datetime as dt

from django.db import models




class TimeStampedModel(models.Model):

    created = models.DateTimeField('Date Created',
                auto_now_add=True)
    updated = models.DateTimeField('Last Modified',
                auto_now=True)

    class Meta:
        get_latest_by = 'updated'
        ordering = ('-updated', '-created',)
        abstract = True



class RawNassData(TimeStampedModel):
    ''' Autogenerated model file '''

    source_desc = models.CharField(max_length=32, null=True, blank=True)
    sector_desc = models.CharField(max_length=255, null=True, blank=True)
    group_desc = models.CharField(max_length=255, null=True, blank=True)
    commodity_desc = models.CharField(max_length=255, null=True, blank=True)
    class_desc = models.CharField(max_length=255, null=True, blank=True)
    prodn_practice_desc = models.CharField(max_length=255, 
            null=True, blank=True)
    util_practice_desc = models.CharField(max_length=255, null=True, blank=True)
    statisticcat_desc = models.CharField(max_length=255, null=True, blank=True)
    unit_desc = models.CharField(max_length=255, null=True, blank=True)
    short_desc = models.CharField(max_length=255, null=True, blank=True)
    domain_desc = models.CharField(max_length=255, null=True, blank=True)
    domaincat_desc = models.CharField(max_length=255, null=True, blank=True)
    agg_level_desc = models.CharField(max_length=255, null=True, blank=True)
    state_ansi = models.CharField(max_length=24, null=True, blank=True)
    state_fips_code = models.CharField(max_length=32, null=True, blank=True)
    state_alpha = models.CharField(max_length=10, null=True, blank=True)
    state_name = models.CharField(max_length=32, null=True, blank=True)
    asd_code = models.CharField(max_length=32, null=True, blank=True)
    asd_desc = models.CharField(max_length=255, null=True, blank=True)
    county_ansi = models.CharField(max_length=32, null=True, blank=True)
    county_code = models.CharField(max_length=32, null=True, blank=True)
    county_name = models.CharField(max_length=32, null=True, blank=True)
    region_desc = models.CharField(max_length=32, null=True, blank=True)
    zip_5 = models.CharField(max_length=32, null=True, blank=True)
    watershed_code = models.CharField(max_length=255, null=True, blank=True)
    watershed_desc = models.CharField(max_length=32, null=True, blank=True)
    congr_district_code = models.CharField(max_length=32, null=True, blank=True)
    country_code = models.CharField(max_length=32, null=True, blank=True)
    country_name = models.CharField(max_length=255, null=True, blank=True)
    location_desc = models.CharField(max_length=255, null=True, blank=True)
    year = models.IntegerField(null=True, blank=True)
    freq_desc = models.CharField(max_length=32, null=True, blank=True)
    begin_code = models.CharField(max_length=32, null=True, blank=True)
    end_code = models.CharField(max_length=32, null=True, blank=True)
    reference_period_desc = models.CharField(max_length=32, null=True, blank=True)
    week_ending = models.CharField(max_length=32, null=True, blank=True)
    load_time = models.CharField(max_length=32, null=True, blank=True)
    value = models.CharField(max_length=32, null=True, blank=True)
    cv_percent = models.CharField(max_length=32, null=True, blank=True)

    def __str__(self):
        return "#%s %s - %s - %s" % (
                self.id,
                self.commodity_desc,
                self.county_name,
                self.year,
            )

    def clean_value(self):
        num_string = self.value.replace(',', '')
        try:
            if '.' in num_string:
                return float(num_string)
            else:
                return int(num_string)
        except ValueError:
                return None 

    class Meta:
        pass



#class Metadata(models.Model):
#    id = models.AutoField(primary_key=True)
#    name = models.CharField(max_length=64, blank=True, null=True)
#    description = models.CharField(max_length=256, blank=True, null=True)
#    table_name = models.CharField(max_length=64, blank=True, null=True)
#    unit = models.CharField(max_length=64, blank=True, null=True)
#    field = models.CharField(max_length=64, blank=True, null=True)
#    source_name = models.CharField(max_length=256, blank=True, null=True)
#    source_link = models.CharField(max_length=512, blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'metadata'
#
#
#class OainHarvestAcres(models.Model):
#    id = models.AutoField(primary_key=True)
#    crop = models.CharField(max_length=64, blank=True, null=True)
#    year = models.SmallIntegerField(blank=True, null=True)
#    fips = models.IntegerField(blank=True, null=True)
#    harvested_acres = models.IntegerField(blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'oain_harvest_acres'
#
#
#class RawOainData(models.Model):
#    id = models.AutoField(primary_key=True)
#    commodity = models.CharField(max_length=128, blank=True, null=True)
#    county = models.CharField(max_length=64, blank=True, null=True)
#    year = models.IntegerField(blank=True, null=True)
#    harvest_units = models.IntegerField(blank=True, null=True)
#    yield_unit = models.CharField(max_length=32, blank=True, null=True)
#    production_unit = models.IntegerField(blank=True, null=True)
#    price_unit = models.CharField(max_length=32, blank=True, null=True)
#    value_produced = models.CharField(max_length=64, blank=True, null=True)
#    percent_sold = models.IntegerField(blank=True, null=True)
#    value_sales = models.CharField(max_length=64, blank=True, null=True)
#    harvest_unit_of_measure = models.CharField(max_length=32, blank=True, null=True)
#    yield_unit_of_measure = models.CharField(max_length=32, blank=True, null=True)
#    production_unit_of_measure = models.CharField(max_length=32, blank=True, null=True)
#    price_unit_of_measure = models.CharField(max_length=32, blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'raw_oain_data'
#
#
#class RawSubsidyData(models.Model):
#    id = models.AutoField(primary_key=True)
#    rank = models.IntegerField(blank=True, null=True)
#    program = models.CharField(max_length=64, blank=True, null=True)
#    fips = models.IntegerField(blank=True, null=True)
#    number_of_recipients = models.IntegerField(blank=True, null=True)
#    year = models.SmallIntegerField(blank=True, null=True)
#    subsidy_total = models.IntegerField(blank=True, null=True)
#    crop = models.CharField(max_length=64, blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'raw_subsidy_data'
#
#
#class RegionLookup(models.Model):
#    id = models.AutoField(primary_key=True)
#    st_code = models.IntegerField(blank=True, null=True)
#    state = models.CharField(max_length=2, blank=True, null=True)
#    co_code = models.DecimalField(max_digits=3, decimal_places=0, blank=True, null=True)
#    region = models.CharField(max_length=90, blank=True, null=True)
#    fips = models.IntegerField(blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'region_lookup'
#
#
#class SubsidyDollars(models.Model):
#    id = models.AutoField(primary_key=True)
#    crop = models.CharField(max_length=64, blank=True, null=True)
#    year = models.SmallIntegerField(blank=True, null=True)
#    fips = models.IntegerField(blank=True, null=True)
#    subsidy_dollars = models.IntegerField(blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'subsidy_dollars'
#
#
#class SubsidyRecipients(models.Model):
#    id = models.AutoField(primary_key=True)
#    commodity = models.CharField(max_length=64, blank=True, null=True)
#    year = models.SmallIntegerField(blank=True, null=True)
#    fips = models.IntegerField(blank=True, null=True)
#    subsidy_recipients = models.IntegerField(blank=True, null=True)
#
#    class Meta:
#        managed = True
#        db_table = 'subsidy_recipients'
